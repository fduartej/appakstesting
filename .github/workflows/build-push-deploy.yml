name: Build Push Deploy

on:
  push:
    branches:
      - main # Cambia esto si tu rama principal tiene otro nombre

jobs:
  # Job para construir y subir imagen Docker a ACR
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      # 3. Build de la aplicaci√≥n
      - name: Build application
        run: dotnet build --configuration Release

      # 7. Autenticarse en Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 4. Iniciar sesi√≥n en Azure Container Registry
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_ACR_SERVER }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      # 5. Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AZURE_ACR_SERVER }}/database-test-api:latest .

      # 6. Subir la imagen a Azure Container Registry
      - name: Push Docker image
        run: |
          docker push ${{ secrets.AZURE_ACR_SERVER }}/database-test-api:latest

      # 8. Verificar conectividad con AKS privado
      - name: Verify AKS private cluster access
        run: |
          echo "Verificando acceso al cluster AKS privado..."
          az aks show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER }}

          # Verificar si el cluster es privado
          PRIVATE_CLUSTER=$(az aks show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER }} --query "apiServerAccessProfile.enablePrivateCluster" -o tsv)
          echo "Private cluster: $PRIVATE_CLUSTER"

      # 9. Test de conectividad usando runCommand
      - name: Test AKS connectivity via runCommand
        run: |
          echo "Probando conectividad usando az aks command invoke..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl get nodes -o wide"

      # 10. Actualizar imagen y configuraci√≥n en archivos YAML
      - name: Update image and config in YAML files
        run: |
          echo "Actualizando imagen y configuraci√≥n en archivos YAML..."

          # Actualizar la imagen en deployment.yaml
          sed -i "s|crintegrationappsnoprod01.azurecr.io/database-test-api:latest|${{ secrets.AZURE_ACR_SERVER }}/database-test-api:latest|g" k8s/deployment.yaml

          # Actualizar el Client ID en secretproviderclass.yaml
          sed -i "s|APP_IDENTITY_CLIENT_ID|${{ secrets.APP_IDENTITY_CLIENT_ID }}|g" k8s/secretproviderclass.yaml

          # Actualizar el Tenant ID en secretproviderclass.yaml
          sed -i "s|AZURE_TENANT_ID|${{ secrets.AZURE_TENANT_ID }}|g" k8s/secretproviderclass.yaml

          # Actualizar el Client ID en serviceaccount.yaml
          sed -i "s|APP_IDENTITY_CLIENT_ID|${{ secrets.APP_IDENTITY_CLIENT_ID }}|g" k8s/serviceaccount.yaml

          echo "=== Archivos actualizados ==="
          echo "Deployment:"
          cat k8s/deployment.yaml
          echo "SecretProviderClass:"
          cat k8s/secretproviderclass.yaml
          echo "ServiceAccount:"
          cat k8s/serviceaccount.yaml

      # 11. Deploy usando runCommand para cluster privado
      - name: Deploy to AKS private cluster
        run: |
          echo "Desplegando en cluster AKS privado usando runCommand..."

          # Deploy ServiceAccount
          echo "Desplegando ServiceAccount..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl apply -f - << 'EOF'
          $(cat k8s/serviceaccount.yaml)
          EOF"

          # Deploy SecretProviderClass
          echo "Desplegando SecretProviderClass..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl apply -f - << 'EOF'
          $(cat k8s/secretproviderclass.yaml)
          EOF"

          # Deploy service
          echo "Desplegando service..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl apply -f - << 'EOF'
          $(cat k8s/service.yaml)
          EOF"

          # Deploy deployment
          echo "Desplegando deployment..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl apply -f - << 'EOF'
          $(cat k8s/deployment.yaml)
          EOF"

          # Deploy ingress
          echo "Desplegando ingress..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl apply -f - << 'EOF'
          $(cat k8s/ingress.yaml)
          EOF"

      # 12. Verificar el estado del deployment y Azure Key Vault
      - name: Verify deployment and Key Vault integration
        run: |
          echo "üîç Verificando deployment y integraci√≥n con Azure Key Vault..."
          echo "============================================================="

          # Obtener informaci√≥n del pod
          echo "=== Obteniendo informaci√≥n del pod ==="
          POD_NAME=$(az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl get pods -l app=database-test-api -o jsonpath='{.items[0].metadata.name}'" --query "logs" -o tsv)

          echo "üìù Pod Name: $POD_NAME"

          # Verificar SecretProviderClass detallado
          echo -e "\n=== 1. SecretProviderClass Status ==="
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl describe secretproviderclass database-test-api-secrets"

          # Verificar ServiceAccount con Workload Identity
          echo -e "\n=== 2. ServiceAccount y Workload Identity ==="
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl get serviceaccount database-test-api-sa -o jsonpath='{.metadata.annotations}'"

          # Verificar montaje del volumen Key Vault
          if [ "$POD_NAME" != "" ] && [ "$POD_NAME" != "null" ]; then
            echo -e "\n=== 3. Verificaci√≥n del montaje de Key Vault ==="
            echo "üîç Verificando si el volumen de Key Vault est√° montado..."
            
            az aks command invoke \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.AZURE_AKS_CLUSTER }} \
              --command "kubectl describe pod $POD_NAME | grep -A 10 'secrets-store'"

            echo -e "\nüóÇÔ∏è Verificando archivos de secretos en /mnt/secrets-store/..."
            az aks command invoke \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.AZURE_AKS_CLUSTER }} \
              --command "kubectl exec $POD_NAME -- ls -la /mnt/secrets-store/ 2>/dev/null" \
              && echo "‚úÖ Secretos montados correctamente" \
              || echo "‚ùå No se pudieron acceder a los secretos"

            echo -e "\nüìä Contando archivos de secretos..."
            SECRET_COUNT=$(az aks command invoke \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.AZURE_AKS_CLUSTER }} \
              --command "kubectl exec $POD_NAME -- find /mnt/secrets-store/ -type f 2>/dev/null | wc -l" --query "logs" -o tsv)
            echo "üìà N√∫mero de secretos encontrados: $SECRET_COUNT"

            # Verificar Kubernetes Secret creado por CSI
            echo -e "\n=== 4. Kubernetes Secret Object ==="
            az aks command invoke \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.AZURE_AKS_CLUSTER }} \
              --command "kubectl get secret database-test-api-secrets -o yaml 2>/dev/null" \
              && echo "‚úÖ Kubernetes Secret creado por CSI" \
              || echo "‚ùå Kubernetes Secret no encontrado"

            # Verificar variables de entorno
            echo -e "\n=== 5. Variables de entorno de la aplicaci√≥n ==="
            az aks command invoke \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.AZURE_AKS_CLUSTER }} \
              --command "kubectl exec $POD_NAME -- env | grep -E '(ConnectionStrings|ASPNETCORE|ApiKey)' 2>/dev/null" \
              && echo "‚úÖ Variables de entorno configuradas" \
              || echo "‚ö†Ô∏è Variables de entorno espec√≠ficas no encontradas"

            # Verificar logs de la aplicaci√≥n relacionados con Key Vault
            echo -e "\n=== 6. Logs de aplicaci√≥n relacionados con Key Vault ==="
            az aks command invoke \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.AZURE_AKS_CLUSTER }} \
              --command "kubectl logs $POD_NAME --tail=100 | grep -i 'keyvault\|secret\|connection\|auth' | head -10" \
              || echo "‚ÑπÔ∏è No se encontraron logs espec√≠ficos de Key Vault"

          else
            echo "‚ùå No se encontr√≥ ning√∫n pod para verificar"
          fi

          # Verificar logs del Azure Key Vault Provider
          echo -e "\n=== 7. Logs del Azure Key Vault Provider ==="
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl logs -n kube-system -l app=csi-secrets-store-provider-azure --tail=20 | grep -i 'database-test-api\|error\|failed'" \
            || echo "‚ÑπÔ∏è No se encontraron logs relevantes del provider"

          # Verificar eventos de Kubernetes
          echo -e "\n=== 8. Eventos relacionados con SecretProviderClass ==="
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl get events --field-selector involvedObject.name=database-test-api-secrets --sort-by=.metadata.creationTimestamp"

          # Estado del deployment
          echo -e "\n=== 9. Estado final del deployment ==="
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl rollout status deployment/database-test-api --timeout=300s"

          # Resumen final
          echo -e "\n=== 10. Resumen final ==="
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl get pods,secretproviderclass,secrets -l app=database-test-api"

          # Logs finales de la aplicaci√≥n
          echo -e "\n=== 11. Logs finales de la aplicaci√≥n ==="
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl logs -l app=database-test-api --tail=30"

          echo -e "\nüèÅ Verificaci√≥n completada. Revisa los resultados arriba para identificar cualquier problema con Key Vault."
