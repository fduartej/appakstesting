name: Build Push Deploy

on:
  push:
    branches:
      - main # Cambia esto si tu rama principal tiene otro nombre

jobs:
  # Job para construir y subir imagen Docker a ACR
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      # 3. Build de la aplicación
      - name: Build application
        run: dotnet build --configuration Release

      # 7. Autenticarse en Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 4. Iniciar sesión en Azure Container Registry
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_ACR_SERVER }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      # 5. Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AZURE_ACR_SERVER }}/database-test-api:latest .

      # 6. Subir la imagen a Azure Container Registry
      - name: Push Docker image
        run: |
          docker push ${{ secrets.AZURE_ACR_SERVER }}/database-test-api:latest

      # 8. Verificar conectividad con AKS antes de obtener credenciales
      - name: Verify AKS connectivity
        run: |
          echo "Verificando acceso al cluster AKS..."
          az aks show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER }}

          # Verificar si el cluster es privado
          PRIVATE_CLUSTER=$(az aks show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER }} --query "apiServerAccessProfile.enablePrivateCluster" -o tsv)
          echo "Private cluster: $PRIVATE_CLUSTER"

      # 9. Configurar acceso al clúster de AKS (SIN --admin para evitar errores de permisos)
      - name: Set up AKS context
        run: |
          echo "Configurando contexto de AKS..."
          az aks get-credentials \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --overwrite-existing

          # Verificar conectividad
          echo "Verificando conectividad con kubectl..."
          kubectl cluster-info --request-timeout=30s || echo "Cluster info failed, continuando..."

          # Test básico de conectividad
          kubectl get nodes --request-timeout=30s || echo "Unable to get nodes, but continuing..."

      # 9. Actualizar imagen en deployment
      - name: Update deployment image
        run: |
          sed -i "s|YOUR_ACR_NAME.azurecr.io/database-test-api:latest|${{ secrets.AZURE_ACR_SERVER }}/database-test-api:latest|g" k8s/deployment.yaml

      # 10. Desplegar en AKS con validación deshabilitada para evitar problemas de DNS
      - name: Deploy to AKS
        run: |
          echo "Desplegando aplicación en AKS..."
          kubectl apply -f k8s/deployment.yaml --validate=false
          kubectl apply -f k8s/service.yaml --validate=false
          kubectl apply -f k8s/ingress.yaml --validate=false

      # 11. Verificar el estado del deployment con mejor manejo de errores
      - name: Verify deployment status
        run: |
          echo "Verificando estado del deployment..."
          kubectl wait --for=condition=available --timeout=300s deployment/database-test-api || echo "Wait timeout, but checking status..."

          echo "=== Deployment Status ==="
          kubectl get deployment database-test-api -o wide || echo "Could not get deployment"

          echo "=== Pod Status ==="
          kubectl get pods -l app=database-test-api -o wide || echo "Could not get pods"

          echo "=== Service Status ==="
          kubectl get service database-test-api -o wide || echo "Could not get service"

          echo "=== Ingress Status ==="
          kubectl get ingress database-test-api -o wide || echo "Could not get ingress"

          echo "=== Recent Events ==="
          kubectl get events --sort-by=.metadata.creationTimestamp | tail -10 || echo "Could not get events"
