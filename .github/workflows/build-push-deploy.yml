name: Build Push Deploy

on:
  push:
    branches:
      - main # Cambia esto si tu rama principal tiene otro nombre

jobs:
  # Job para construir y subir imagen Docker a ACR
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      # 3. Build de la aplicaci贸n
      - name: Build application
        run: dotnet build --configuration Release

      # 7. Autenticarse en Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 4. Iniciar sesi贸n en Azure Container Registry
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_ACR_SERVER }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      # 5. Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AZURE_ACR_SERVER }}/database-test-api:latest .

      # 6. Subir la imagen a Azure Container Registry
      - name: Push Docker image
        run: |
          docker push ${{ secrets.AZURE_ACR_SERVER }}/database-test-api:latest

      # 8. Verificar conectividad con AKS privado
      - name: Verify AKS private cluster access
        run: |
          echo "Verificando acceso al cluster AKS privado..."
          az aks show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER }}

          # Verificar si el cluster es privado
          PRIVATE_CLUSTER=$(az aks show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER }} --query "apiServerAccessProfile.enablePrivateCluster" -o tsv)
          echo "Private cluster: $PRIVATE_CLUSTER"

      # 9. Test de conectividad usando runCommand
      - name: Test AKS connectivity via runCommand
        run: |
          echo "Probando conectividad usando az aks command invoke..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl get nodes -o wide"

      # 10. Actualizar imagen y configuraci贸n en archivos YAML
      - name: Update image and config in YAML files
        run: |
          echo "Actualizando imagen y configuraci贸n en archivos YAML..."

          # Actualizar la imagen en deployment.yaml
          sed -i "s|crintegrationappsnoprod01.azurecr.io/database-test-api:latest|${{ secrets.AZURE_ACR_SERVER }}/database-test-api:latest|g" k8s/deployment.yaml

          # Actualizar el Client ID en serviceaccount.yaml
          sed -i "s|APP_IDENTITY_CLIENT_ID|${{ secrets.APP_IDENTITY_CLIENT_ID }}|g" k8s/serviceaccount.yaml

          echo "=== Archivos actualizados ==="
          echo "Deployment:"
          cat k8s/deployment.yaml
          echo "ServiceAccount:"
          cat k8s/serviceaccount.yaml

      # 11. Deploy usando runCommand para cluster privado
      - name: Deploy to AKS private cluster
        run: |
          echo "Desplegando en cluster AKS privado usando runCommand..."

          # Deploy ServiceAccount
          echo "Desplegando ServiceAccount..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl apply -f - << 'EOF'
          $(cat k8s/serviceaccount.yaml)
          EOF"

          # Deploy service
          echo "Desplegando service..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl apply -f - << 'EOF'
          $(cat k8s/service.yaml)
          EOF"

          # Deploy deployment
          echo "Desplegando deployment..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl apply -f - << 'EOF'
          $(cat k8s/deployment.yaml)
          EOF"

          # Deploy ingress
          echo "Desplegando ingress..."
          az aks command invoke \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --command "kubectl apply -f - << 'EOF'
          $(cat k8s/ingress.yaml)
          EOF"
